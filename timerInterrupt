#include <hidef.h>      /* common defines and macros */
#include "derivative.h"      /* derivative-specific definitions */
#include <MC9S12C128.h>
//#include <math.h>
#define TOF_ISR 16 // TOF _IST vector 0xFFDE „³ n=16
 uchar count;
           
         
void main(void) {
  /* put your own code here */
                    DDRA=0xFF;    //make PB an output
                    PORTA=0x00;
                    DDRE=0xFF;
                    count=0;
                    TSCR1=0x80;      // enable timer
                    TSCR2=0x85;    // no interrupt, prescaler=32  (see section ())
                    TFLG2=TFLG2|TFLG2_TOF_MASK;
                    _asm CLI;
                    while(1)
                      {
                            PORTE=0x04;
                      }
 
 
  /* please make sure that you never leave main */
}

 //#pragma CODE_SEG __NEAR_SEG NON_BANKED
//void INTRRUPT toi_isr(void)
//interrupt (((0x10000-Vtimovf)/2)-1) void TOF_ISR(void)
/*interrupt 16 void TimerOverflow(void) 
{
   
        count++;
        PORTA=count;
       TFLG2=TFLG2|TFLG2_TOF_MASK;
}
//#pragma CODE_SEG DEFAULT
                            */
   
#pragma CODE_SEG NON_BANKED
interrupt 16 void TIM0_ISR(void)
{
  TFLG2 = 0x80;                     /* Reset interrupt request flag */  
  count++;
       PORTA=count;
}
#pragma CODE_SEG DEFAULT
